#!/usr/bin/env bash

ARCHASSAULT_DOMAIN='https://repo.archassault.org'

script_path="$(readlink -f "$0")"
script_name="${script_path//*\/}"

function help_function() {
    printf '\n%s\n\n' "USAGE: $script_name [OPTIONS] [PKGDIR] [PKGDIR...]"
    printf '%s\n' 'OPTIONS:'
    printf '    %-13s %s\n' '-v|--verbose' 'output information about each package'
    printf '    %-13s %s\n\n' '-h|--help' 'display this help text'
    printf '%s\n\n' 'PKGDIR: Path to a pacman package cache (ie: /var/cache/pacman/pkg)'
    exit 0
}

function errorexit() {
    printf '%s\n' "$1" >&2
    exit 1
}

# Handle arguments passed at runtime
while egrep -q "^-" <<< "$1"; do
    case "$1" in
        -v|--verbose)
            verbose=1
            ;;
        -h|--help)
            help_function
            ;;
        *)
            errorexit "$1 is not a valid argument"
            ;;
    esac
    shift
done

[[ -n "$1" ]] \
    || errorexit 'run this script with one or more package directories as an argument'

for pkgdir in "$@"; do
    # Remove trailing slash from the directory if one exists
    pkgdir=$(sed 's|\/$||' <<< "$pkgdir")

    # Exit if the pkgdir isn't a valid directory
    [[ -d "$pkgdir" ]] \
        || errorexit "$pkgdir is not a directory"

    # Detect the arch from the pkgdir and fail if it can't be found

    arch=$(find "$pkgdir" -mindepth 1 -maxdepth 1 -type f -regextype posix-egrep -regex "$pkgdir/[a-z].*-[0-9]:?[^-]*-[^\.]*\.pkg\..*" ! -name '*any.pkg.*' | head -n 1)
    arch="${pkgtmp/*\/}"
    arch="${pkgtmp/*-}"
    arch="${pkgtmp/\.*}"
    if [[ ! "$arch" =~ ^(x86_64|i686|armv6h|armv7h)$ ]]; then
        if [[ -z "$arch" ]]; then
            for pkg in "$pkgdir"/*; do
                if [[ "$pkg" =~ any\.pkg\. ]]; then
                    _arch=$(uname -m)
                    case $_arch in
                        armv6|armv7)
                            arch="${_arch}h"
                            ;;
                        *)
                            arch="$_arch"
                            ;;
                    esac
                    break
                fi
            done
            if [[ -z "$_arch" ]]; then
                errorexit "could not determine architecture, is $pkgdir a package directory?"
            else
                unset _arch
            fi
        fi
    fi
    [[ "$verbose" = 1 ]] \
        && printf '%s\n' "==> arch set to: $arch"

    # Load the latest DB for the pkgdir's arch into curr_pkglist and fail if it's empty or the fails don't contain $arch
    curr_pkglist=$(curl -s -0 "$ARCHASSAULT_DOMAIN/archassault/archassault/os/$arch/archassault.db" \
        | unxz \
        | tar t \
        | sed 's|/.*$||' \
        | sort -u)
    [[ -n "$curr_pkglist" ]] \
        || errorexit "package database could not be downloaded"
    [[ "$curr_pkglist" =~ [a-z].*-[^-]*-[0-9]* ]] \
        || errorexit "invalid package data"

    # For each package in the folder, run `oldpkg` on packages in the repo with versions that don't match
    for pkgfile in "$pkgdir"/*; do
        pkgext=$(sed -re 's|.*\.(pkg\.[a-z]*\.[a-z]*)$|\1|' <<< "$pkgfile")
        package=$(sed 's|-[^-]*$||' < <(basename "$pkgfile"))
        pkgname=$(sed -re 's|^(.*)-[^-]*-[0-9]*$|\1|' <<< "$package")
        pkgver=$(sed -re 's|-[0-9]*$||;s|^.*-([^-]*)|\1|g' <<< "$package")
        pkgrev=$(sed -re 's|^.*-([^-]*)$|\1|' <<< "$package")

        # Failsafe: only run if the pieces match, and the package itself is in the repo
        if [[ $(find "$pkgdir" -mindepth 1 -maxdepth 1 -type f -name "$pkgname-$pkgver-$pkgrev*$pkgext") ]]; then
            if egrep -q "($arch|any)\.$pkgext" <<< "$pkgfile"; then
                if egrep -q "^${pkgname}-[^-]*-[0-9]*$" <<< "$curr_pkglist"; then
                    if ! grep -q "^$pkgname-$pkgver-$pkgrev$" <<< "$curr_pkglist"; then
                        [[ "$verbose" = 1 ]] \
                            && printf '%s  ' '==>'
                        printf '%s' "$pkgfile"
                        [[ "$verbose" = 1 ]] \
                            && printf ' %s' 'is out of date'
                        printf '\n'
                    else
                        [[ "$verbose" = 1 ]] && printf '%s\n' "==> $pkgfile is up to date"
                    fi
                else
                    [[ "$verbose" = 1 ]] && printf '%s\n' "==> $pkgfile isn't in the repo"
                fi
            else
                [[ "$verbose" = 1 ]] && printf '%s\n' "==> $pkgfile isn't the correct arch"
            fi
        else
            [[ "$verbose" = 1 ]] && printf '%s\n' "==> $pkgfile isn't recognized as a package"
        fi
    done
done

exit 0
