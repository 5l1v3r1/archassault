diff -rubN pristine/lib/curl_ntlm_core.c fixed/lib/curl_ntlm_core.c
--- pristine/lib/curl_ntlm_core.c	2012-01-23 10:31:30.000000000 -0500
+++ fixed/lib/curl_ntlm_core.c	2012-06-04 19:23:31.283015385 -0400
@@ -365,10 +365,56 @@
 {
   size_t len = strlen(password);
   unsigned char *pw = malloc(len * 2);
+  int i;
+  int j;
+  int HexValue=0;
+  int HexChar=0;
   CURLcode result;
   if(!pw)
     return CURLE_OUT_OF_MEMORY;
+if (len == 65)
+  {
+  	
+  	// we're assuming the hash is of the 65 character format
+    // LMLMLMLMLMLMLMLMLMLMLMLMLMLMLMLM:NTNTNTNTNTNTNTNTNTNTNTNTNTNTNTN
+    // since this fuction wants the NT hash, we use from 33-64
+    
+    // convert NT hash (b33-65) to lower case
+    for (i=0;i<33;i++)
+      {
+      	pw[i] = tolower(password[i+33]);
+      }
+    for (i=33;i<len *2; i++)
+      {
+        pw[i] = 0; 
+    } 
+    
+    for (i=0; i<16; i++) {
+     HexValue = 0x0;
+     for (j=0; j<2; j++) {
+         HexChar = (char)pw[2*i+j];
+
+       //if (HexChar > 0x39)
+       //  HexChar = HexChar | 0x20;  /* convert upper case to lower */
+
+       if (!(((HexChar >= 0x30) && (HexChar <= 0x39))||   /* 0 - 9 */
+          ((HexChar >= 0x61) && (HexChar <= 0x66)))) {    /* a - f */
+         fprintf(stderr, "Error invalid char (%c) for hash.\n", HexChar);
+         exit(1);
+       }
 
+       HexChar -= 0x30;
+       if (HexChar > 0x09)  /* HexChar is "a" - "f" */
+         HexChar -= 0x27;
+
+       HexValue = (HexValue << 4) | (char)HexChar;
+     }
+   
+     ntbuffer[i] = (unsigned char)HexValue;
+  }
+    memset(ntbuffer + 16, 0, 21 - 16);
+}
+else {
   ascii_to_unicode_le(pw, password, len);
 
   /*
@@ -400,7 +446,7 @@
 #elif defined(USE_NSS)
     Curl_md4it(ntbuffer, pw, 2 * len);
 #endif
-
+}  
     memset(ntbuffer + 16, 0, 21 - 16);
   }
 
