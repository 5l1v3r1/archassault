# Maintainer: ArchAssualt <team@archassault.org>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

#pkgbase=linux-archassault   # Build stock -ARCH kernel
pkgbase=linux-archassault       # Build kernel with a different name
_srcname=linux-3.15
pkgver=3.15.4
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "https://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        # the main kernel config files
        'config' 'config.x86_64'
        # standard config files for mkinitcpio ramdisk
        'linux.preset'
        'change-default-console-loglevel.patch'
        'kali-wifi-injection.patch'
        'add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by-default.patch'
        'af_802154-Disable-auto-loading-as-mitigation-against.patch'
        'cdc_ncm-cdc_mbim-use-ncm-by-default.patch'
        'cirrus-disable-modeset-by-default.patch'
        'efi-autoload-efivars.patch'
        'fs-enable-link-security-restrictions-by-default.patch'
        'iwlwifi-do-not-request-unreleased-firmware.patch'
        'kali-wifi-injection.patch'
        'mgag200-disable-autoload.patch'
        'mvsas-Recognise-device-subsystem-9485-9485-as-88SE94.patch'
        'radeon-firmware-is-required-for-drm-and-kms-on-r600-onward.patch'
        'rds-Disable-auto-loading-as-mitigation-against-local.patch'
        'sched-autogroup-disabled.patch'
        'snd-pcsp-disable-autoload.patch'
        'x86-memtest-WARN-if-bad-RAM-found.patch'
        'yama-disable-by-default.patch'
        )
sha512sums=('d5dc477cad4584e56e2e2ef9e0950c2b22e76e5cf5090a896ba099cb7c5e5db1853a4aeb96b199189653dc66d461557e95198e37516a619f7ddc01ba6b308e02'
            '2e317f096bff6a01e7ee2a5ab72d228bbc174b3699a3c4c8c569519ddd0556c8a86711cb1f7b040c62ba2211e848f82e2802ca419c5969a1152e9f9d2f0dbb62'
            '9421682ee00e96c2bde8d575653fa4ece2b54989dc052c43a441ad35f8fc145dc1cc500c91fa7ffc5e9101efa6b0260089a4c8565d81dfb9f73c1c2b6d796d41'
            'd414ada0590d197a04390763afa0f7771a17f59ed0e777ba99261422eaa57690f67f6e416329248e3dea021f6de4580c9df487c2bcc6a68fb3b04b4ab2c1c8dc'
            '5fe243dea17fdb71edc7098e0e1938beb7f2d851bd2be3981c4ef3d617aaad81ff1cb4c84689082472ebd13b721e849ad2214aefb9ffe40ec3d76abfd40b87ad'
            '502192b5ce94c8254205f5ddb85bf50c5f1e78c768817b10dca3a7716a8c59d5e093842631acb51e3805cbf85522e0a9200942656f11bbb4ea1b7d61e24ddd78'
            '9d1f539f3317ccc4c2ba71e4f24c5581f23f5475570b7a458ce5bc77b30a0fd4c94beb9e1f978ef4cd99a20cdf5e1d84b6095c6a9b81db4e532a61058c02db4b'
            '2bc514925c434ee75e40ea12348bcd91d4527b8450e34187bb6e18d1ec734e01a3b3393a7d57aa37b263108f5f4aba798c01c196a4fae435e4bfd51a52007d21'
            '7d5547887d0390a1c0eea1ccd7b9f38a5ce8e34bf83114d8c865a55590b90604b8852955d3d937124f49a37409e8a43ff126a21359679f58c6b2f3a175bb89b7'
            '695cf1855f64b6b564600578155265efad8f2119d353c1539118ab21eb7032ed0f0d49c7b599698ae96c577f499a1bcf5306fc179a5c1a51a7667f0d419c6312'
            'b30010aee01ea7ba977bb607a5dca83db4c6897c6f645b565ed56861979c135922388aa2b1c8dcb6a8c665b5c65df2d4606626bd5f9ee9434f226bec5a89d79e'
            '72de0c98d5467e2355c4169458e89fee9162a85c6631e506dcb808f1b7e559bb5553ea452f2e3e2bc5365169dc8a64c7e51a42a49b1544456614618be62ebbaf'
            '18f546b04efa25f4c81cbab316e0ad4e29ef433d28646479419f3176473a22df134c42fd3b043f2a41629a6cadf533d925003e179e39a87c242b7397bb020a1e'
            'c0f1d9eecee5f1adeba60d5dd493c4b47994e1abff26b2560f4cc1781dd52f4dd0e599479068d652e67844664657c9af49912fe5fcc0f0181c3b1196d4ead13c'
            '9d1f539f3317ccc4c2ba71e4f24c5581f23f5475570b7a458ce5bc77b30a0fd4c94beb9e1f978ef4cd99a20cdf5e1d84b6095c6a9b81db4e532a61058c02db4b'
            '7c2c8a9fcb49a89e1d064daf750e4c8ba602c710f7ea10c473655b6a78c823b51a624a4c230e1222b5b39a75e6c27f54d3ecd26ef58c33213bb568f571867274'
            '08eac33dcd322e5b6ad721a0c60ce3af5f87dcb72886b870dd06e5c3c2655702ecb1aeaa074d26e4711cd599ea663a99256b97fb632babfeab993d8e70cd1d6e'
            '5f4bff39e7cc627aad649d0d14a7f9bf72495268f5810d0f9fbde0e67ae9730dfb422cb7d48bed4300f672b98ef9b4e608092100e2f85db24bae532210ff58e5'
            'b6a38cf1915d18abb881e08801ce6b66c35e02d6b707aa10b4db052be68b9900a29491fc51c1c402965c4a68ab85497c8fbe1aaeab7c203a4997bd8e1f282571'
            'd79b409c5a6084631f1e4ceee81516a837521a80a9fec036d1180a5234ed7c58d28e115a901fbf445136aceb99f2b572d2887c331050752a0195047b22d0a96b'
            '733559ef25da85640784694d18d461a7177301a567713ac1f727fc87285675877ee328ac410f046fa446c7b36d457b3efded09cfc2ff9f79417d449f2a353c4c'
            '8a51c8d66481f2ec5bd61a2e37c2f5a27d75b323dad012f6f1e8319b2c53269c1b364bd9ce82d85a3d1cc3930129653c9773474ab1285650c2b7d1b24332b087'
            '6c58fea1f11b23a074a26ea62c92b645b2c829292574a55fb6f5cb7ed4227ba7f6d1b369fc4360fcf396dbf48f8f964c168f119be5263e62ed081606a34b0e6a')


_kernelname=${pkgbase#linux}

prepare() {
  cd "${srcdir}/${_srcname}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${pkgver}"

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  patch -p1 -i "${srcdir}/change-default-console-loglevel.patch"

  #kali specific patches
  patch -p1 -i "${srcdir}/kali-wifi-injection.patch"
  patch -p1 -i "${srcdir}/add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by-default.patch"
  patch -p1 -i "${srcdir}/af_802154-Disable-auto-loading-as-mitigation-against.patch"
  patch -p1 -i "${srcdir}/cdc_ncm-cdc_mbim-use-ncm-by-default.patch"
  patch -p1 -i "${srcdir}/cirrus-disable-modeset-by-default.patch"
  patch -p1 -i "${srcdir}/efi-autoload-efivars.patch"
  patch -p1 -i "${srcdir}/fs-enable-link-security-restrictions-by-default.patch"
  patch -p1 -i "${srcdir}/iwlwifi-do-not-request-unreleased-firmware.patch"
  patch -p1 -i "${srcdir}/mgag200-disable-autoload.patch"
  patch -p1 -i "${srcdir}/mvsas-Recognise-device-subsystem-9485-9485-as-88SE94.patch"
  patch -p1 -i "${srcdir}/radeon-firmware-is-required-for-drm-and-kms-on-r600-onward.patch"
  patch -p1 -i "${srcdir}/rds-Disable-auto-loading-as-mitigation-against-local.patch"
  patch -p1 -i "${srcdir}/sched-autogroup-disabled.patch"
  patch -p1 -i "${srcdir}/snd-pcsp-disable-autoload.patch"
  patch -p1 -i "${srcdir}/x86-memtest-WARN-if-bad-RAM-found.patch"
  patch -p1 -i "${srcdir}/yama-disable-by-default.patch"

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # rewrite configuration
  yes "" | make config >/dev/null
}

build() {
  cd "${srcdir}/${_srcname}"

  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

_package() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  [ "${pkgbase}" = "linux" ] && groups=('base')
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("kernel26${_kernelname}=${pkgver}")
  conflicts=("kernel26${_kernelname}")
  replaces=("kernel26${_kernelname}")
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=linux.install

  cd "${srcdir}/${_srcname}"

  KARCH=x86

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgbase}"

  # set correct depmod command for install
  cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
  true && install=${install}.pkg
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/" \
    -i "${startdir}/${install}"

  # install mkinitcpio preset file for kernel
  install -D -m644 "${srcdir}/linux.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"
  sed \
    -e "1s|'linux.*'|'${pkgbase}'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgbase}\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgbase}.img\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgbase}-fallback.img\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}/version"

  # Now we call depmod...
  depmod -b "${pkgdir}" -F System.map "${_kernver}"

  # move module tree /lib -> /usr/lib
  mkdir -p "${pkgdir}/usr"
  mv "${pkgdir}/lib" "${pkgdir}/usr/"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/lib/modules/${_kernver}/build/vmlinux" 
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  provides=("kernel26${_kernelname}-headers=${pkgver}")
  conflicts=("kernel26${_kernelname}-headers")
  replaces=("kernel26${_kernelname}-headers")

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  cd "${srcdir}/${_srcname}"
  install -D -m644 Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/.config"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include"

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/lib/modules/${_kernver}/build"
  cp -a scripts "${pkgdir}/usr/lib/modules/${_kernver}/build"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/.tmp_versions"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel/"

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs/xfs_sb.h"

  # copy in Kconfig files
  for i in $(find . -name "Kconfig*"); do
    mkdir -p "${pkgdir}"/usr/lib/modules/${_kernver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/${i}"
  done

  chown -R root.root "${pkgdir}/usr/lib/modules/${_kernver}/build"
  find "${pkgdir}/usr/lib/modules/${_kernver}/build" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/lib/modules/${_kernver}/build/arch/{alpha,arc,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}

_package-docs() {
  pkgdesc="Kernel hackers manual - HTML documentation that comes with the ${pkgbase/linux/Linux} kernel"
  provides=("kernel26${_kernelname}-docs=${pkgver}")
  conflicts=("kernel26${_kernelname}-docs")
  replaces=("kernel26${_kernelname}-docs")

  cd "${srcdir}/${_srcname}"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build"
  cp -al Documentation "${pkgdir}/usr/lib/modules/${_kernver}/build"
  find "${pkgdir}" -type f -exec chmod 444 {} \;
  find "${pkgdir}" -type d -exec chmod 755 {} \;

  # remove a file already in linux package
  rm -f "${pkgdir}/usr/lib/modules/${_kernver}/build/Documentation/DocBook/Makefile"
}

pkgname=("${pkgbase}" "${pkgbase}-headers" "${pkgbase}-docs")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
